
import { Modality, GenerateContentResponse } from "@google/genai";

export const fileToBase64 = (file: File): Promise<string> => {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result as string);
        reader.onerror = error => reject(error);
    });
};

const FAL_RUN_URL = "https://fal.run/moments-ai";

const callFal = async (app: string, payload: object) => {
    if (!process.env.API_KEY) {
        throw new Error("API_KEY environment variable not set for Fal execution.");
    }
    
    const response = await fetch(`${FAL_RUN_URL}/${app}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            ...payload,
            api_key: process.env.API_KEY // Pass the key for the Fal script to use
        })
    });

    if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Fal API request failed: ${errorText}`);
    }
    return response.json();
};


export const generateImageFromText = async (prompt: string): Promise<string> => {
    try {
        const result = await callFal('image-generate', { prompt });
        
        if (result.images && result.images.length > 0) {
            const image = result.images[0];
            // Assuming Fal returns a base64 string and mime_type
            return `data:${image.mime_type};base64,${image.content}`;
        }
        throw new Error("No image was generated by Fal.");
    } catch (error) {
        console.error("Error generating image from text via Fal:", error);
        throw error;
    }
};

export const editImageWithText = async (base64Image: string, mimeType: string, prompt: string): Promise<string> => {
    try {
        const base64Data = base64Image.split(',')[1];
        
        const result = await callFal('image-edit', {
            image_data: base64Data,
            mime_type: mimeType,
            prompt: prompt
        });

        if (result.images && result.images.length > 0) {
            const image = result.images[0];
            return `data:${image.mime_type};base64,${image.content}`;
        }
        throw new Error("No edited image was returned from Fal.");

    } catch (error) {
        console.error("Error editing image via Fal:", error);
        throw error;
    }
};
